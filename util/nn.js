// Cannot explain how this works because it's a neural network.
// Accepts 16 inputs and outputs number between 0 (not spam) - 1 (probably spam)>

module.exports = function(input) {
    return 1 / (1 + 1 / Math.exp(-0.9508817563906362 - 1.750793516359245 * (1 / (1 + 1 / Math.exp(-0.3131502440924795 + 1.2546150680170371 * (input[0]) + 0.6405246962966482 * (input[1]) + 0.2177031583766776 * (input[2]) + 0.15940644082637181 * (input[3]) + 0.454690122597498 * (input[4]) + 0.27137188710444565 * (input[5]) + 0.40066514615081733 * (input[6]) + 0.17481029229579712 * (input[7]) + 0.19649036433095907 * (input[8]) + 0.019787288094190742 * (input[9]) + 0.3264361288516095 * (input[10]) + 0.03489606595078271 * (input[11]) - 0.16799717255679875 * (input[12]) + 0.13891946944767727 * (input[13]) - 0.059308263951130896 * (input[14]) + 0.07434210157515206 * (input[15])))) - 6.569080002712193 * (1 / (1 + 1 / Math.exp(-1.1764446564460251 + 4.8802100152216745 * (input[0]) + 2.752522715515179 * (input[1]) + 1.4302097774707971 * (input[2]) + 1.1681792115234677 * (input[3]) + 1.318704820517333 * (input[4]) + 1.5422491678928762 * (input[5]) + 1.036085894016293 * (input[6]) + 0.7900325168510759 * (input[7]) + 0.9763729629320947 * (input[8]) + 0.27906045280346803 * (input[9]) + 0.5961319901449793 * (input[10]) + 0.45280252142614313 * (input[11]) + 0.14663519554346838 * (input[12]) - 0.0906794455315775 * (input[13]) - 0.03211856732277153 * (input[14]) - 0.0058360749428933425 * (input[15])))) + 6.988980255814882 * (1 / (1 + 1 / Math.exp(1.376887627273776 - 5.605686210097175 * (input[0]) - 2.960352640064876 * (input[1]) - 1.7554469501390522 * (input[2]) - 1.4286488422495804 * (input[3]) - 1.4484259327097753 * (input[4]) - 1.5544588464671287 * (input[5]) - 1.4054851944994975 * (input[6]) - 0.8600426643806485 * (input[7]) - 0.8953566519827656 * (input[8]) - 0.5645047312035242 * (input[9]) - 0.8459092920297303 * (input[10]) - 0.7137535128834929 * (input[11]) - 0.2672278072553596 * (input[12]) - 0.09181170956491509 * (input[13]) - 0.11236364624349839 * (input[14]) + 0.27785728302758467 * (input[15])))) + 17.149694780919955 * (1 / (1 + 1 / Math.exp(3.6909483356659734 - 13.298219071216876 * (input[0]) - 7.170105321248386 * (input[1]) - 4.209088092981409 * (input[2]) - 3.4870944958970562 * (input[3]) - 3.371809786979087 * (input[4]) - 3.564732249702978 * (input[5]) - 3.047441610118271 * (input[6]) - 2.306105428318515 * (input[7]) - 2.299534583873767 * (input[8]) - 1.3251498745155765 * (input[9]) - 1.9928435520660728 * (input[10]) - 1.5635729094750668 * (input[11]) - 0.5889940533266891 * (input[12]) - 0.3590597942336532 * (input[13]) + 0.18805933898825025 * (input[14]) + 0.3496215471279035 * (input[15])))) + 4.853775404554692 * (1 / (1 + 1 / Math.exp(0.7827604019744051 - 3.922057076921355 * (input[0]) - 2.1864379110333454 * (input[1]) - 1.299309283134166 * (input[2]) - 0.8765698441617378 * (input[3]) - 0.9717207979379648 * (input[4]) - 0.9308377562361432 * (input[5]) - 1.0671953786585244 * (input[6]) - 0.72758801424708 * (input[7]) - 0.5990165201246085 * (input[8]) - 0.25052850462321025 * (input[9]) - 0.7873955065954151 * (input[10]) - 0.3291942221190437 * (input[11]) - 0.21327789889537935 * (input[12]) - 0.09848641192097532 * (input[13]) + 0.18468424725575613 * (input[14]) + 0.08439354860812198 * (input[15])))) + 1.6259687362839281 * (1 / (1 + 1 / Math.exp(-0.395418912457347 - 1.352790589307361 * (input[0]) - 0.8324304553113988 * (input[1]) - 0.5263181515247228 * (input[2]) - 0.333826883985653 * (input[3]) - 0.4926918985556145 * (input[4]) - 0.4897634620617415 * (input[5]) - 0.1969746757564722 * (input[6]) - 0.10503904790022994 * (input[7]) - 0.3479161977434828 * (input[8]) - 0.014843661290114976 * (input[9]) - 0.3493952016864365 * (input[10]) - 0.00034057465242500243 * (input[11]) - 0.054384095243505993 * (input[12]) - 0.035371892791786125 * (input[13]) - 0.1600740634071344 * (input[14]) - 0.10089593336257807 * (input[15])))) - 13.285310139799815 * (1 / (1 + 1 / Math.exp(-2.7436178991099966 + 9.859242376369307 * (input[0]) + 5.6048557608835585 * (input[1]) + 3.1703982097054895 * (input[2]) + 2.694374167600172 * (input[3]) + 2.4092570406996345 * (input[4]) + 2.7336696846137696 * (input[5]) + 2.496143209620065 * (input[6]) + 1.8475695539493644 * (input[7]) + 1.7056359736546336 * (input[8]) + 0.8739293770191111 * (input[9]) + 1.548278008592799 * (input[10]) + 1.055733196254074 * (input[11]) + 0.46667008308970404 * (input[12]) + 0.006883686408195384 * (input[13]) + 0.017150396414766796 * (input[14]) - 0.28902829057801754 * (input[15])))) - 5.409358576863812 * (1 / (1 + 1 / Math.exp(-0.8832199730663103 + 4.064112893285724 * (input[0]) + 2.013273740935418 * (input[1]) + 1.2374628396321732 * (input[2]) + 1.2614372022283924 * (input[3]) + 1.1350999399139976 * (input[4]) + 0.9543859031720877 * (input[5]) + 0.8443145180868142 * (input[6]) + 0.5338844030442331 * (input[7]) + 0.689966486446889 * (input[8]) + 0.2591206318181367 * (input[9]) + 0.6513950865663419 * (input[10]) + 0.5671126288056267 * (input[11]) + 0.1374841656011204 * (input[12]) - 0.07253261652270258 * (input[13]) + 0.18432325759696178 * (input[14]) - 0.19062255489317254 * (input[15]))))))
};